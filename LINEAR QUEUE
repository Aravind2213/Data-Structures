#include <stdio.h>
#define N 6
int queue[N];
int front=-1;
int rear =-1;
int s;

void enqueue(int x)
{
    if(rear==N-1)
    {
        printf("Overflow\n");
    }
    else if(front ==0 && rear == 0)
    {
        front=rear=0;
        queue[rear]=x;
        printf("The inserted element is -> %d\n",x);
    }
    else
    {
        rear++;
        queue[rear]=x;
        printf("The inserted element is -> %d\n",x);
        
    }
}
void dequeue()
{
    if(front == -1 && rear == -1)
    {
        printf("Queue is empty\n");
    }
    else if(front == rear)
    {
        printf("The removed element is -> %d\n",queue[front]);
        front=rear=-1;
    }
    else
    {
        printf("The removed element is -> %d\n",queue[front]);
        front++;
    }
}
void display()
{
    int i;
    if(front == -1 &&  rear == -1)
    {
        printf("Queue is empty\n");
    }
    else
    {
        for(i=front;i<=rear;i++)
        {
            printf("%d ",queue[i]);
        }
        printf("\n");
    }
}
void peek()//This returns the element at which front and rear is pointing
{
    if(rear==-1 && front == -1)
    {
        printf("Queue is empty");
    }
    else
    {
        printf("The front is pointing at -> %d\n",queue[front]);
        printf("The rear is pointing at -> %d\n",queue[rear]);
        
    }
}

int main()
{
    enqueue(2);
    enqueue(3);
    enqueue(3);
    enqueue(3);
    enqueue(3);
    enqueue(17);
    enqueue(22);
    dequeue();
    dequeue();
    enqueue(9);
    display();
    dequeue();
    display();
    dequeue();
    display();
    peek();
    dequeue();
    dequeue();
    peek();

    return 0;
}
